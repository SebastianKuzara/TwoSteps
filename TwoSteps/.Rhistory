tableForSingleArticle$PreviousAddress <- NULL
tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
if(nrow(tableForSingleArticle) > 0 )
print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Shyamal_Bose")
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Shyamal_Bose")
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Shyamal_Bose")
funs <- list.files("./functions/")
for(f in funs)
{
source(paste0("./functions/", f))
};rm(funs, f)
checkedArticles <- twoSteps()
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/1936%E2%80%931939_Arab_revolt_in_Palestine")
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Susya,_Har_Hebron")
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Susya,_Har_Hebron")
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
if(ifFoundSearchedArticle)
print(nextArticles)
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Susya,_Har_Hebron")
X <- data.frame(
A = 1:3,
B = c("a", "r", 'd'),
C = rnorm(3)
)
Y <- data.frame(
D = 15, E = "Pa"
)
merge(X, Y)
Z <- data.frame(
D = 15:16, E = c("Pa", "Re")
)
merge(x, Z)
merge(X, Z)
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
if(nrow(tableForSingleArticle) > 1)
print(tableForSingleArticle)
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Susya,_Har_Hebron")
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
if(nrow(tableForSingleArticle) > 1)
print(tableForSingleArticle)
if(ifFoundSearchedArticle)
print(nextArticles)
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
# tableForSingleArticle <- merge(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Susya,_Har_Hebron")
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
if(nrow(tableForSingleArticle) > 1)
print(tableForSingleArticle)
if(ifFoundSearchedArticle)
print(nextArticles)
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
# tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
tableForSingleArticle$NextAddress <- NULL
tableForSingleArticle <- merge(nextArticles, tableForSingleArticle)
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Susya,_Har_Hebron")
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
if(nrow(tableForSingleArticle) > 1)
print(tableForSingleArticle)
if(ifFoundSearchedArticle)
print(nextArticles)
if(ifFoundSearchedArticle)
print(tableForSingleArticle)
# tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
#########################
tableForSingleArticle$NextAddress <- NULL
tableForSingleArticle <- merge(nextArticles, tableForSingleArticle)
#########################
# if(ifFoundSearchedArticle)
#   print(tableForSingleArticle)
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Susya,_Har_Hebron")
getAndMergeNextArticleURLs <- function(tableForSingleArticle, tableWithNextURLs, URLcore, searchedURL)
{
options(stringsAsFactors = FALSE)
nextArticles <- data.frame(
PreviousAddress = character(0),
NextAddress = character(0)
)
rowNr <- 1
while(rowNr <= nrow(tableForSingleArticle) & !get(x = "ifFoundSearchedArticleGlobal", envir = globalenv()))
{
url <- tableForSingleArticle[rowNr, "NextAddress"]
err <- TRUE ## fake assumption
while(err)
{
tryCatch(expr = {
articlePage <- goToArticle(URL = url)
err <- FALSE
}, error = function(e)
{
cat(paste("Try to read again ", url, "address.\n"))
Sys.sleep(5)
})
}
readArticleNr <<- readArticleNr + 1
nextArticlesForGivenURL <- getNextArticleURLs(page = articlePage, URLcore = URLcore)
ifFoundSearchedArticle <- any(checkIfFoundSearchedURL(searchedURL = searchedURL, URLs = nextArticlesForGivenURL$NextAddress))
assign("ifFoundSearchedArticleGlobal", ifFoundSearchedArticle, envir = globalenv())
tableForSingleArticle[rowNr, "IfFound"] <- ifFoundSearchedArticle
nextArticles <- rbind(nextArticles, nextArticlesForGivenURL)
rowNr <- rowNr + 1
}
tableForSingleArticle$PreviousAddress <- NULL
# if(nrow(tableForSingleArticle) > 1)
#   print(tableForSingleArticle)
# if(ifFoundSearchedArticle)
#   print(nextArticles)
# if(ifFoundSearchedArticle)
#   print(tableForSingleArticle)
# tableForSingleArticle <- inner_join(nextArticles, tableForSingleArticle, by = c("PreviousAddress" = "NextAddress"))
#########################
tableForSingleArticle$NextAddress <- NULL
tableForSingleArticle <- merge(nextArticles, tableForSingleArticle)
#########################
# if(ifFoundSearchedArticle)
#   print(tableForSingleArticle)
tableForSingleArticle$AddressesPath <- paste(tableForSingleArticle$AddressesPath, tableForSingleArticle$NextAddress, sep = " | ")
tableForSingleArticle <- tableForSingleArticle[!duplicated(tableForSingleArticle),]
# if(nrow(tableForSingleArticle) > 0 )
#   print(head(tableForSingleArticle))
return(tableForSingleArticle)
}
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Susya,_Har_Hebron")
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
checkedArticles <- twoSteps()
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
checkedArticles <- twoSteps()
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
checkedArticles <- twoSteps()
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
checkedArticles <- twoSteps()
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
checkedArticles <- twoSteps()
checkedArticles[checkedArticles$IfFound , "AddressesPath"]
funs <- list.files("./functions/")
for(f in funs)
{
source(paste0("./functions/", f))
};rm(funs, f)
checkedArticles <- twoSteps()
checkedArticles[checkedArticles$IfFound , "Path"]
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/Adolf_Hitler")
checkedArticles <- twoSteps(articlePage = "https://en.wikipedia.org/wiki/World_War_II")
ifFoundMessage <- function(ifFound)
{
if(ifFound)
{
message("The searched article has been found :)")
}
else
{
message("Unfortunately, the searched article has not been found :(")
}
return(invisible())
}
checkedArticles <- twoSteps()
ifFoundMessage <- function(ifFound)
{
if(ifFound)
{
message("Yeah! The searched article has been found :)")
}
else
{
message("Unfortunately, the searched article has not been found :(")
}
return(invisible())
}
checkedArticles[checkedArticles$IfFound , "Path"]
funs <- list.files("./functions/")
for(f in funs)
{
source(paste0("./functions/", f))
};rm(funs, f)
checkedArticles <- twoSteps()
checkedArticles[checkedArticles$IfFound , "Path"]
